{"ast":null,"code":"// src/api.js\n\nimport mockData from './mock-data';\n\n/**\r\n * \r\n * @param {Array} events\r\n * @returns {Array} - An array of unique locations:\r\n * The following function should be in the \"api.js\" file.\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\nexport const extractLocations = events => {\n  const extractedLocations = events.map(event => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\n\n/**\r\n *@param {string} [Location] - The location of the event\r\n  *@returns {Promise<Array>} - An array of events:\r\n * This function will fetch the list of all events\r\n */\nexport const getEvents = async location => {\n  // Simulate an asynchronous API call\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const eventsToReturn = location ? mockData.filter(event => event.location === location) : mockData;\n      resolve(eventsToReturn);\n    }, 100);\n  });\n};","map":{"version":3,"names":["mockData","extractLocations","events","extractedLocations","map","event","location","locations","Set","getEvents","Promise","resolve","setTimeout","eventsToReturn","filter"],"sources":["C:/Users/malav/OneDrive/CareerFoundry/Achievement4/meet/src/api.js"],"sourcesContent":["// src/api.js\r\n\r\nimport mockData from './mock-data';\r\n\r\n/**\r\n * \r\n * @param {Array} events\r\n * @returns {Array} - An array of unique locations:\r\n * The following function should be in the \"api.js\" file.\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\r\nexport const extractLocations = (events) => {\r\n    const extractedLocations = events.map((event) => event.location);\r\n    const locations = [...new Set(extractedLocations)];\r\n    return locations;\r\n  };\r\n\r\n/**\r\n *@param {string} [Location] - The location of the event\r\n  *@returns {Promise<Array>} - An array of events:\r\n * This function will fetch the list of all events\r\n */\r\nexport const getEvents = async (location) => {\r\n  // Simulate an asynchronous API call\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      const eventsToReturn = location \r\n        ? mockData.filter(event => event.location === location)\r\n        : mockData;\r\n      resolve(eventsToReturn);\r\n    }, 100);\r\n  });\r\n};"],"mappings":"AAAA;;AAEA,OAAOA,QAAQ,MAAM,aAAa;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAIC,MAAM,IAAK;EACxC,MAAMC,kBAAkB,GAAGD,MAAM,CAACE,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAAC;EAChE,MAAMC,SAAS,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACL,kBAAkB,CAAC,CAAC;EAClD,OAAOI,SAAS;AAClB,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,SAAS,GAAG,MAAOH,QAAQ,IAAK;EAC3C;EACA,OAAO,IAAII,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,MAAMC,cAAc,GAAGP,QAAQ,GAC3BN,QAAQ,CAACc,MAAM,CAACT,KAAK,IAAIA,KAAK,CAACC,QAAQ,KAAKA,QAAQ,CAAC,GACrDN,QAAQ;MACZW,OAAO,CAACE,cAAc,CAAC;IACzB,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}