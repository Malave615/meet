{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malav\\\\OneDrive\\\\CareerFoundry\\\\Achievement4\\\\meet\\\\src\\\\components\\\\CitySearch.js\",\n  _s = $RefreshSig$();\n// src/components/CitySearch.js\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CitySearch = ({\n  allLocations,\n  setCurrentCity\n}) => {\n  _s();\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const handleInputChanged = event => {\n    const value = event.target.value;\n    const filteredLocations = allLocations ? allLocations.filter(location => {\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n    }) : [];\n    setQuery(value);\n    setSuggestions(filteredLocations);\n  };\n  const handleItemClicked = event => {\n    const value = event.target.textContent;\n    setQuery(value);\n    setShowSuggestions(false); // to hide the list\n    setCurrentCity(value);\n  };\n  useEffect(() => {\n    setSuggestions(allLocations);\n  }, [allLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"city-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"city\",\n      placeholder: \"Search for a city\",\n      value: query,\n      onFocus: () => setShowSuggestions(true),\n      onChange: handleInputChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), showSuggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"suggestions\",\n      children: [suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: handleItemClicked,\n        children: suggestion\n      }, suggestion, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: handleItemClicked,\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"See all cities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)\n      }, 'See all cities', false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this);\n};\n_s(CitySearch, \"JY7RAyFiSxjSoe7GwIJS/mAoVCM=\");\n_c = CitySearch;\nexport default CitySearch;\n\n/* import { useState, useEffect, useRef } from 'react';\r\n\r\nconst CitySearch = ({ allLocations, setCurrentCity }) => {\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n  const [query, setQuery] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const wrapperRef = useRef(null);\r\n\r\n  const handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const filteredLocations = allLocations ? allLocations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }) : [];\r\n    setQuery(value);\r\n    setSuggestions(filteredLocations);\r\n    setShowSuggestions(value.length > 0);\r\n  };\r\n\r\n  const handleItemClicked = (event) => {\r\n    const value = event.target.textContent;\r\n    setQuery(value);\r\n    setShowSuggestions(false); // to hide the list\r\n    setCurrentCity(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSuggestions(allLocations);\r\n  }, [allLocations]);\r\n\r\n  const handleClickOutside = (event) => {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\r\n      setShowSuggestions(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [wrapperRef]);\r\n   \r\n\r\n  return (\r\n    <div data-testid=\"city-search\" ref={wrapperRef}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"city\"\r\n        placeholder=\"Search for a city\"\r\n        value={query}\r\n        data-testid=\"city-input\"\r\n        onFocus={() => setShowSuggestions(true)}\r\n        onChange={handleInputChanged}\r\n      />\r\n      {showSuggestions && (\r\n        <ul className=\"suggestions\" role=\"list\">\r\n          {suggestions.length > 0 ? (\r\n            suggestions.map((suggestion) => (\r\n              <li onClick={handleItemClicked} key={suggestion}>{suggestion}</li>\r\n            ))\r\n          ) : (  \r\n            <li>No suggestions available</li> \r\n          )}  \r\n          <li key='See all cities' onClick={handleItemClicked}>\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n };\r\n\r\nexport default CitySearch; */\nvar _c;\n$RefreshReg$(_c, \"CitySearch\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","CitySearch","allLocations","setCurrentCity","_s","showSuggestions","setShowSuggestions","query","setQuery","suggestions","setSuggestions","handleInputChanged","event","value","target","filteredLocations","filter","location","toUpperCase","indexOf","handleItemClicked","textContent","children","type","className","placeholder","onFocus","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","suggestion","onClick","_c","$RefreshReg$"],"sources":["C:/Users/malav/OneDrive/CareerFoundry/Achievement4/meet/src/components/CitySearch.js"],"sourcesContent":["// src/components/CitySearch.js\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst CitySearch = ({ allLocations, setCurrentCity }) => {\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  const handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const filteredLocations = allLocations ? allLocations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }) : [];\r\n    setQuery(value);\r\n    setSuggestions(filteredLocations);\r\n  };\r\n\r\n  const handleItemClicked = (event) => {\r\n    const value = event.target.textContent;\r\n    setQuery(value);\r\n    setShowSuggestions(false); // to hide the list\r\n    setCurrentCity(value); \r\n  };\r\n  \r\n  useEffect(() => {\r\n    setSuggestions(allLocations);\r\n  }, [allLocations]);\r\n\r\n  return (\r\n      <div data-testid=\"city-search\">\r\n        <input \r\n          type=\"text\"\r\n          className=\"city\"\r\n          placeholder=\"Search for a city\"\r\n          value={query}\r\n          onFocus={() => setShowSuggestions(true)}\r\n          onChange={handleInputChanged}\r\n        />\r\n        {showSuggestions && ( \r\n          <ul className=\"suggestions\">\r\n            {suggestions.map((suggestion) => (\r\n              <li \r\n                onClick={handleItemClicked} \r\n                key={suggestion}>{suggestion}\r\n              </li>\r\n            ))}\r\n            <li key='See all cities'\r\n                onClick={handleItemClicked}>\r\n              <b>See all cities</b>\r\n            </li>\r\n          </ul>\r\n        )}\r\n      </div>      \r\n  );\r\n}\r\n   \r\nexport default CitySearch;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* import { useState, useEffect, useRef } from 'react';\r\n\r\nconst CitySearch = ({ allLocations, setCurrentCity }) => {\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n  const [query, setQuery] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const wrapperRef = useRef(null);\r\n\r\n  const handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const filteredLocations = allLocations ? allLocations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }) : [];\r\n    setQuery(value);\r\n    setSuggestions(filteredLocations);\r\n    setShowSuggestions(value.length > 0);\r\n  };\r\n\r\n  const handleItemClicked = (event) => {\r\n    const value = event.target.textContent;\r\n    setQuery(value);\r\n    setShowSuggestions(false); // to hide the list\r\n    setCurrentCity(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSuggestions(allLocations);\r\n  }, [allLocations]);\r\n\r\n  const handleClickOutside = (event) => {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\r\n      setShowSuggestions(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [wrapperRef]);\r\n   \r\n\r\n  return (\r\n    <div data-testid=\"city-search\" ref={wrapperRef}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"city\"\r\n        placeholder=\"Search for a city\"\r\n        value={query}\r\n        data-testid=\"city-input\"\r\n        onFocus={() => setShowSuggestions(true)}\r\n        onChange={handleInputChanged}\r\n      />\r\n      {showSuggestions && (\r\n        <ul className=\"suggestions\" role=\"list\">\r\n          {suggestions.length > 0 ? (\r\n            suggestions.map((suggestion) => (\r\n              <li onClick={handleItemClicked} key={suggestion}>{suggestion}</li>\r\n            ))\r\n          ) : (  \r\n            <li>No suggestions available</li> \r\n          )}  \r\n          <li key='See all cities' onClick={handleItemClicked}>\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n };\r\n\r\nexport default CitySearch; */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}